
TODO LIST :

Per il passo 1 ) :
La soluzione che hai scelto allora potrebbe essere correta perche vedo che devi rimuovere le relazioni manualmente prima della delete,
perché Hibernate non gestisce automaticamente la pulizia della tabella di join in una @ManyToMany bidirezionale. GJ

2) Dai una pulita al codice, le nomenclature devono essere correte, commenti brevi ed efficaci del comportamento di un metodo non di cosa hai fatto
idem quando fai un commit troppo lungo non va bene
Esempio : getClasseAssegnataProfessore e poi torni una lista quindi dovrebbe essere getClassiProfessore... è importante che ti abitui a fare questa cosa, VARIABILI E METODI PARLANTI  -> DA FARE

7) Una volta fatto questo e testato che OGNI API funzioni, passa alla validazione degli oggetti che ti vengono passati nelle API hai 2 strade :
    6.1 : Usi validator custom
    6.2 : Usi Jakarta con @Valid
Entrambe sono soluzioni utilizzate, a te la scelta.


 Testato **Studenti** in seguito alle modifiche tutte le funzionalità danno indietto dati pertinenti
 Testato **Professori** in seguito alle modifiche tutte le funzionalità danno indietto dati pertinenti   
 Testato **Classi** in seguito alle modifiche tutte le funzionalità danno indietto dati pertinenti

 Adesso devo capire come si fa e come funziona un "validator custom" che e la scelta con cui ho deciso di procedere.
 Poi continuerò. 


8) Implementa error handling, l'applicativo non si deve spaccare facilmente

9) Crea dei test con JUnit e Mockito, testa la correttezza delle API, poi ne parliamo



P.S. : dopo che hai fatto un task cancellalo pure, stai iniziando a muoverti bene,
P.P.S. : dobbiamo fare un test dell'applicazione nella sua totalità dove mi fai vedere che funziona come voglio... non correre.



